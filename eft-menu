#!/bin/bash

#Uncomment set -x to debug (see bash output to assist self debug)
#set -x

#File location and name
SRC="${BASH_SOURCE[0]}"
 
# The name of the File without the leading path
filename=$(basename "$SRC")

# Newt color theme for whiptail
# forground, background
export NEWT_COLORS='
root=,black
border=green,black
title=green,black
roottext=red,black
window=red,black
textbox=white,black
button=black,green
compactbutton=white,black
listbox=white,black
actlistbox=black,white
actsellistbox=black,green
checkbox=green,black
actcheckbox=black,green
'

#Versinfo
versinfo="0.pre.alpha"

set_funName_01(){
##Discription##Set functionName
clear
  printf 'set_ functions use install/setup/configuration\n'
}

set_printf(){
##Discription##Printf text placement
clear
  printf 'This is a test:\n\tthis is only a test\nThis has been a test\n\tOf Discription 02\n'

}

get_funName_01(){
##Discription##Get functionName 
  printf 'set_ functions use Download/wget/git\n'

}

see_tput(){
##Discription##tput cup text placement
# example - Credit Gilles Quenot
# https://stackoverflow.com/questions/27239183/how-to-center-script-output-in-the-middle-of-the-screen
  clear
  cols=$(tput cols)
  lines=$(tput lines)
  numcols=$(((cols-6)/2))
  numlines=$((lines/2))
    tput cup $numlines $numcols
    printf "%s\n" "ASCII"
    tput cup $((numlines+1)) $numcols
    printf "%s\n" ""
    tput cup $((numlines+2)) $numcols
    printf "%s" "Place"
    tput cup $((numlines+3)) $numcols
    tput cup "$(tput lines)" 0 
}

# edit above #

run_whipit()
{
  cols=$(tput cols)
  lines=$(tput lines)
  readarray -t fun_array < <( grep -e '^[a-z].*_.*(){' "$SRC"  | sed 's|(){.*||g' )
  readarray -t dsc_array < <( grep -e '^##.*##' "$SRC" | sed "s|^##.*##||g" )
  readarray -t dsc_count < <( grep -c '^##.*##' "$SRC" | sed 's|^##.*##||g' ) 
  end="${dsc_count[0]}"
  readarray -t arr2 < <( for ((i=0; i<end; i++)) ; do  printf "%s\n) %s\n"  "$i" "${dsc_array[i]}" ; done ) 
  result=$(whiptail --title  "${filename%.*}" --cancel-button Finish --menu --clear " " "$lines" "$cols" "$end" "${arr2[@]}" 3>&2 2>&1 1>&3- )
  "${fun_array[$result]}"
}

see_version()
{ 
  versinfo="0.pre.alpha"                                
  echo " ${filename%.*} version $versinfo "
}

see_help()
{
  echo "Usage: ${filename%.*} [ -h ] [ -v ]"
  echo -e "Options:"
  echo -e "\t-h\tPrint this help."
  echo -e "\t-v\tPrint version info."
}

if [[ $# -eq 1 ]] ; then
while getopts ":hv" opt; do
    case $opt in
      h) see_help break ;;
      v) see_version break ;;
      ?) echo  -e "\033[33;5m?! Say What!?\033[0m" ; see_help break ;;
    esac
  exit
done
fi

if [[ $# -eq 0 ]] ; then
  run_whipit
fi
